{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gabit\\\\Desktop\\\\Apps\\\\moveit\\\\src\\\\contexts\\\\ChallengeContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challendesCompleted,\n    1: setChallendesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  } //pedir permissão para enviar notificações para o usuário.\n\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallendesCompleted(challendesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      startNewChallenge,\n      currentExperience,\n      challendesCompleted,\n      levelUp,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/gabit/Desktop/Apps/moveit/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challendesCompleted","setChallendesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","Notification","requestPermission","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA4CC,SAA5C,QAA4D,OAA5D;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAA+D;AAClE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAmBP,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAoBC;AAApB,MAA4CT,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAU,CAAnB,EAAqB,CAArB,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD,GAXiE,CAalE;;;AACAL,EAAAA,SAAS,CAAC,MAAK;AACXiB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AACAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASc,iBAAT,GAA4B;AACxB,QAAG,CAACf,eAAJ,EAAoB;AAChB;AACH;;AACD,UAAM;AAACgB,MAAAA;AAAD,QAAWhB,eAAjB;AAEA,QAAIiB,eAAe,GAAGrB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAGC,eAAe,IAAIf,qBAAtB,EAA6C;AACzCe,MAAAA,eAAe,GAAGA,eAAe,GAAGf,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACoB,eAAD,CAApB;AACAhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAE,CAAtB,CAAtB;AACH;;AAED,sBACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/BJ,MAAAA,KAD+B;AAE/Bc,MAAAA,iBAF+B;AAG/BZ,MAAAA,iBAH+B;AAI/BE,MAAAA,mBAJ+B;AAK/BO,MAAAA,OAL+B;AAM/BL,MAAAA,eAN+B;AAO/Bc,MAAAA,cAP+B;AAQ/BZ,MAAAA,qBAR+B;AAS/Ba,MAAAA;AAT+B,KAAnC;AAAA,cAWGtB;AAXH;AAAA;AAAA;AAAA;AAAA,UADA;AAeH","sourcesContent":["import {createContext, useState, ReactNode, useEffect} from 'react';\r\n\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body;'|'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    startNewChallenge: () => void;\r\n    currentExperience:  number;\r\n    challendesCompleted:  number;\r\n    levelUp: () => void;\r\n    activeChallenge: Challenge;\r\n    resetChallenge: () => void;\r\n    experienceToNextLevel: number;\r\n    completeChallenge: () => void;\r\n    \r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}:ChallengesProviderProps){\r\n    const [level, setLevel]= useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challendesCompleted, setChallendesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level+1)*4,2)\r\n\r\n    function levelUp(){\r\n      setLevel(level+1)\r\n    }\r\n\r\n    //pedir permissão para enviar notificações para o usuário.\r\n    useEffect(()=> {\r\n        Notification.requestPermission(); \r\n    }, [])\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n        setActiveChallenge(challenge);\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if(!activeChallenge){\r\n            return;\r\n        }\r\n        const {amount} = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallendesCompleted(challendesCompleted +1)\r\n    }\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{\r\n        level,\r\n        startNewChallenge,\r\n        currentExperience,\r\n        challendesCompleted,\r\n        levelUp,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        experienceToNextLevel,\r\n        completeChallenge,\r\n        }}>\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
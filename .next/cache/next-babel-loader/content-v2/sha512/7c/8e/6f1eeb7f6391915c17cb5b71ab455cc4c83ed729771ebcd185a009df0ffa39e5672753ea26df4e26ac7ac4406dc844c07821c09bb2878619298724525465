{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabit\\\\Desktop\\\\Apps\\\\moveit\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengeContext\";\nvar countdownTimeout;\nexport var CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.05 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.05 * 60);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"12y2hdgftYDMRrFBdoqHz5/jB4s=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/gabit/Desktop/Apps/moveit/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAkCC,UAAlC,EAA8CC,SAA9C,EAAyDC,QAAzD,QAAwE,OAAxE;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AAeA,IAAIC,gBAAJ;AAEA,OAAO,IAAMC,gBAAgB,gBAAIN,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASO,iBAAT,OAA+D;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,oBAEpCP,UAAU,CAACG,iBAAD,CAF0B;AAAA,MAE1DK,iBAF0D,eAE1DA,iBAF0D;;AAAA,kBAI1CN,QAAQ,CAAC,OAAO,EAAR,CAJkC;AAAA,MAI3DO,IAJ2D;AAAA,MAIrDC,OAJqD;;AAAA,mBAKlCR,QAAQ,CAAC,KAAD,CAL0B;AAAA,MAK3DS,QAL2D;AAAA,MAKjDC,WALiD;;AAAA,mBAM5BV,QAAQ,CAAC,KAAD,CANoB;AAAA,MAM3DW,WAN2D;AAAA,MAM9CC,cAN8C;;AASlE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACH;;AAEDT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,YAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAKK,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC7BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT;AAaA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAE9BM,MAAAA,OAAO,EAAPA,OAF8B;AAG9BG,MAAAA,OAAO,EAAPA,OAH8B;AAI9BL,MAAAA,WAAW,EAAXA,WAJ8B;AAK9BF,MAAAA,QAAQ,EAARA,QAL8B;AAM9BQ,MAAAA,cAAc,EAAdA,cAN8B;AAO9BC,MAAAA,cAAc,EAAdA;AAP8B,KAAlC;AAAA,cAUKb;AAVL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAjDeD,iB;;KAAAA,iB","sourcesContent":["import {createContext, ReactNode, useContext, useEffect, useState} from \"react\";\r\nimport { ChallengesContext } from \"./ChallengeContext\";\r\n\r\ninterface CountdownContextData{\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: ()=> void ;\r\n    resetCountdown: ()=> void ;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport const CountdownContext =  createContext({} as CountdownContextData)\r\n\r\nexport function CountdownProvider({children}: CountdownProviderProps) {\r\n\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n    \r\n    const [time, setTime] = useState(0.05 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n\r\n\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    function startCountdown() {\r\n        setIsActive(true);\r\n    }\r\n\r\n    function resetCountdown() {\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(0.05 * 60);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isActive && time > 0) {\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000);\r\n        }\r\n        else if (isActive && time === 0) {\r\n            setHasFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n    }, [isActive, time]);\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{\r\n\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            isActive,\r\n            startCountdown,\r\n            resetCountdown,\r\n\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabit\\\\Desktop\\\\Apps\\\\moveit\\\\src\\\\contexts\\\\ChallengeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challendesCompleted = _useState3[0],\n      setChallendesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  } //pedir permissão para enviar notificações para o usuário.\n\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio!', {\n        body: \"Valendo \".concat(challenge.amount, \" xp.\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallendesCompleted(challendesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      startNewChallenge: startNewChallenge,\n      currentExperience: currentExperience,\n      challendesCompleted: challendesCompleted,\n      levelUp: levelUp,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"8QgXhTdrmurxncuU7cN5pY8xDeI=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/gabit/Desktop/Apps/moveit/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challendesCompleted","setChallendesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","Notification","requestPermission","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA4CC,SAA5C,QAA4D,OAA5D;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,IAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,OAA+D;AAAA;;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;;AAAA,kBACzCL,QAAQ,CAAC,CAAD,CADiC;AAAA,MAC3DM,KAD2D;AAAA,MACpDC,QADoD;;AAAA,mBAEhBP,QAAQ,CAAC,CAAD,CAFQ;AAAA,MAE3DQ,iBAF2D;AAAA,MAExCC,oBAFwC;;AAAA,mBAGZT,QAAQ,CAAC,CAAD,CAHI;AAAA,MAG3DU,mBAH2D;AAAA,MAGtCC,sBAHsC;;AAAA,mBAKpBX,QAAQ,CAAC,IAAD,CALY;AAAA,MAK3DY,eAL2D;AAAA,MAK1CC,kBAL0C;;AAOlE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAU,CAAnB,EAAqB,CAArB,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD,GAXiE,CAalE;;;AACAL,EAAAA,SAAS,CAAC,YAAK;AACXiB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AACAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAIP,YAAY,CAACQ,UAAb,KAA4B,SAAhC,EAA0C;AACtC,UAAIR,YAAJ,CAAiB,eAAjB,EACA;AACIS,QAAAA,IAAI,oBAAaF,SAAS,CAACG,MAAvB;AADR,OADA;AAIH;AACJ;;AAED,WAASC,cAAT,GAAyB;AACrBhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASiB,iBAAT,GAA4B;AACxB,QAAG,CAAClB,eAAJ,EAAoB;AAChB;AACH;;AAHuB,QAIjBgB,MAJiB,GAIPhB,eAJO,CAIjBgB,MAJiB;AAMxB,QAAIG,eAAe,GAAGvB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAGG,eAAe,IAAIjB,qBAAtB,EAA6C;AACzCiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACsB,eAAD,CAApB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAE,CAAtB,CAAtB;AACH;;AAED,sBACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/BJ,MAAAA,KAAK,EAALA,KAD+B;AAE/Bc,MAAAA,iBAAiB,EAAjBA,iBAF+B;AAG/BZ,MAAAA,iBAAiB,EAAjBA,iBAH+B;AAI/BE,MAAAA,mBAAmB,EAAnBA,mBAJ+B;AAK/BO,MAAAA,OAAO,EAAPA,OAL+B;AAM/BL,MAAAA,eAAe,EAAfA,eAN+B;AAO/BiB,MAAAA,cAAc,EAAdA,cAP+B;AAQ/Bf,MAAAA,qBAAqB,EAArBA,qBAR+B;AAS/BgB,MAAAA,iBAAiB,EAAjBA;AAT+B,KAAnC;AAAA,cAWGzB;AAXH;AAAA;AAAA;AAAA;AAAA,UADA;AAeH;;GApEeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, useState, ReactNode, useEffect} from 'react';\r\n\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body;'|'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    startNewChallenge: () => void;\r\n    currentExperience:  number;\r\n    challendesCompleted:  number;\r\n    levelUp: () => void;\r\n    activeChallenge: Challenge;\r\n    resetChallenge: () => void;\r\n    experienceToNextLevel: number;\r\n    completeChallenge: () => void;\r\n    \r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}:ChallengesProviderProps){\r\n    const [level, setLevel]= useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challendesCompleted, setChallendesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level+1)*4,2)\r\n\r\n    function levelUp(){\r\n      setLevel(level+1)\r\n    }\r\n\r\n    //pedir permissão para enviar notificações para o usuário.\r\n    useEffect(()=> {\r\n        Notification.requestPermission(); \r\n    }, [])\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n        setActiveChallenge(challenge);\r\n\r\n        if (Notification.permission === 'granted'){\r\n            new Notification('Novo desafio!',\r\n            {\r\n                body: `Valendo ${challenge.amount} xp.`,\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if(!activeChallenge){\r\n            return;\r\n        }\r\n        const {amount} = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallendesCompleted(challendesCompleted +1)\r\n    }\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{\r\n        level,\r\n        startNewChallenge,\r\n        currentExperience,\r\n        challendesCompleted,\r\n        levelUp,\r\n        activeChallenge,\r\n        resetChallenge,\r\n        experienceToNextLevel,\r\n        completeChallenge,\r\n        }}>\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabit\\\\Desktop\\\\Apps\\\\moveit\\\\src\\\\contexts\\\\ChallengeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challendesCompleted = _useState3[0],\n      setChallendesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      startNewChallenge: startNewChallenge,\n      currentExperience: currentExperience,\n      challendesCompleted: challendesCompleted,\n      levelUp: levelUp\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"zb7Misq+YwVjlaqGaIY9MxaircI=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/gabit/Desktop/Apps/moveit/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challendesCompleted","setChallendesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAiD,OAAjD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAcA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAA+D;AAAA;;AAAA,MAAlCC,QAAkC,QAAlCA,QAAkC;;AAAA,kBACzCJ,QAAQ,CAAC,CAAD,CADiC;AAAA,MAC3DK,KAD2D;AAAA,MACpDC,QADoD;;AAAA,mBAEhBN,QAAQ,CAAC,CAAD,CAFQ;AAAA,MAE3DO,iBAF2D;AAAA,MAExCC,oBAFwC;;AAAA,mBAGZR,QAAQ,CAAC,CAAD,CAHI;AAAA,MAG3DS,mBAH2D;AAAA,MAGtCC,sBAHsC;;AAAA,mBAKpBV,QAAQ,CAAC,IAAD,CALY;AAAA,MAK3DW,eAL2D;AAAA,MAK1CC,kBAL0C;;AAOlE,WAASC,OAAT,GAAkB;AAChBP,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD;;AAED,WAASS,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AACAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,sBACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/Bf,MAAAA,KAAK,EAALA,KAD+B;AAE/BS,MAAAA,iBAAiB,EAAjBA,iBAF+B;AAG/BP,MAAAA,iBAAiB,EAAjBA,iBAH+B;AAI/BE,MAAAA,mBAAmB,EAAnBA,mBAJ+B;AAK/BI,MAAAA,OAAO,EAAPA;AAL+B,KAAnC;AAAA,cAOGT;AAPH;AAAA;AAAA;AAAA;AAAA,UADA;AAWH;;GA5BeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, useState, ReactNode} from 'react';\r\n\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    startNewChallenge: () => void;\r\n    currentExperience:  number;\r\n    challendesCompleted:  number;\r\n    levelUp: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}:ChallengesProviderProps){\r\n    const [level, setLevel]= useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challendesCompleted, setChallendesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    function levelUp(){\r\n      setLevel(level+1)\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n        setActiveChallenge(challenge);\r\n    }\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{\r\n        level,\r\n        startNewChallenge,\r\n        currentExperience,\r\n        challendesCompleted,\r\n        levelUp\r\n        }}>\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}